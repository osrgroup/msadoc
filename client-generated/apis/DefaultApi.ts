// tslint:disable
/**
 * msdoc server API
 * The msdoc server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CreateApiKeyRequestDto,
    CreateServiceDocRequest,
    LoginRequestDto,
    RefreshTokenRequestDto,
} from '../models';

export interface ApiKeysControllerCreateApiKeyRequest {
    createApiKeyRequestDto: CreateApiKeyRequestDto;
}

export interface ApiKeysControllerDeleteApiKeyRequest {
    keyId: any;
}

export interface AuthControllerLoginRequest {
    loginRequestDto: LoginRequestDto;
}

export interface AuthControllerRefreshTokenRequest {
    refreshTokenRequestDto: RefreshTokenRequestDto;
}

export interface ServiceDocsControllerCreateServiceDocRequest {
    createServiceDocRequest: CreateServiceDocRequest;
}

export interface ServiceDocsControllerDeleteServiceDocByNameRequest {
    serviceName: string;
}

export interface ServiceDocsControllerGetServiceDocByNameRequest {
    serviceName: string;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     */
    apiKeysControllerCreateApiKey({ createApiKeyRequestDto }: ApiKeysControllerCreateApiKeyRequest): Observable<void>
    apiKeysControllerCreateApiKey({ createApiKeyRequestDto }: ApiKeysControllerCreateApiKeyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiKeysControllerCreateApiKey({ createApiKeyRequestDto }: ApiKeysControllerCreateApiKeyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(createApiKeyRequestDto, 'createApiKeyRequestDto', 'apiKeysControllerCreateApiKey');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/api-keys',
            method: 'POST',
            headers,
            body: createApiKeyRequestDto,
        }, opts?.responseOpts);
    };

    /**
     */
    apiKeysControllerDeleteAllApiKeys(): Observable<void>
    apiKeysControllerDeleteAllApiKeys(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiKeysControllerDeleteAllApiKeys(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/api-keys',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    apiKeysControllerDeleteApiKey({ keyId }: ApiKeysControllerDeleteApiKeyRequest): Observable<void>
    apiKeysControllerDeleteApiKey({ keyId }: ApiKeysControllerDeleteApiKeyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiKeysControllerDeleteApiKey({ keyId }: ApiKeysControllerDeleteApiKeyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(keyId, 'keyId', 'apiKeysControllerDeleteApiKey');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/api-keys/{keyId}'.replace('{keyId}', encodeURI(keyId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    apiKeysControllerGetAllApiKeys(): Observable<void>
    apiKeysControllerGetAllApiKeys(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiKeysControllerGetAllApiKeys(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/api-keys',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    apiKeysControllerTestApiKey(): Observable<void>
    apiKeysControllerTestApiKey(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiKeysControllerTestApiKey(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/api-keys/test',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    appControllerGetHello(): Observable<void>
    appControllerGetHello(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    appControllerGetHello(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        return this.request<void>({
            url: '/',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    authControllerGetMyProfile(): Observable<void>
    authControllerGetMyProfile(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authControllerGetMyProfile(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/auth/me',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    authControllerLogin({ loginRequestDto }: AuthControllerLoginRequest): Observable<void>
    authControllerLogin({ loginRequestDto }: AuthControllerLoginRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authControllerLogin({ loginRequestDto }: AuthControllerLoginRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(loginRequestDto, 'loginRequestDto', 'authControllerLogin');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/auth/login',
            method: 'POST',
            headers,
            body: loginRequestDto,
        }, opts?.responseOpts);
    };

    /**
     */
    authControllerRefreshToken({ refreshTokenRequestDto }: AuthControllerRefreshTokenRequest): Observable<void>
    authControllerRefreshToken({ refreshTokenRequestDto }: AuthControllerRefreshTokenRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authControllerRefreshToken({ refreshTokenRequestDto }: AuthControllerRefreshTokenRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(refreshTokenRequestDto, 'refreshTokenRequestDto', 'authControllerRefreshToken');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/auth/refresh',
            method: 'POST',
            headers,
            body: refreshTokenRequestDto,
        }, opts?.responseOpts);
    };

    /**
     */
    serviceDocsControllerCreateServiceDoc({ createServiceDocRequest }: ServiceDocsControllerCreateServiceDocRequest): Observable<void>
    serviceDocsControllerCreateServiceDoc({ createServiceDocRequest }: ServiceDocsControllerCreateServiceDocRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    serviceDocsControllerCreateServiceDoc({ createServiceDocRequest }: ServiceDocsControllerCreateServiceDocRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(createServiceDocRequest, 'createServiceDocRequest', 'serviceDocsControllerCreateServiceDoc');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/service-docs',
            method: 'POST',
            headers,
            body: createServiceDocRequest,
        }, opts?.responseOpts);
    };

    /**
     */
    serviceDocsControllerDeleteAllServiceDocs(): Observable<void>
    serviceDocsControllerDeleteAllServiceDocs(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    serviceDocsControllerDeleteAllServiceDocs(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/service-docs',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    serviceDocsControllerDeleteServiceDocByName({ serviceName }: ServiceDocsControllerDeleteServiceDocByNameRequest): Observable<void>
    serviceDocsControllerDeleteServiceDocByName({ serviceName }: ServiceDocsControllerDeleteServiceDocByNameRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    serviceDocsControllerDeleteServiceDocByName({ serviceName }: ServiceDocsControllerDeleteServiceDocByNameRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(serviceName, 'serviceName', 'serviceDocsControllerDeleteServiceDocByName');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/service-docs/{serviceName}'.replace('{serviceName}', encodeURI(serviceName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    serviceDocsControllerGetServiceDocByName({ serviceName }: ServiceDocsControllerGetServiceDocByNameRequest): Observable<void>
    serviceDocsControllerGetServiceDocByName({ serviceName }: ServiceDocsControllerGetServiceDocByNameRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    serviceDocsControllerGetServiceDocByName({ serviceName }: ServiceDocsControllerGetServiceDocByNameRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(serviceName, 'serviceName', 'serviceDocsControllerGetServiceDocByName');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/service-docs/{serviceName}'.replace('{serviceName}', encodeURI(serviceName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    serviceDocsControllerListAllServiceDocs(): Observable<void>
    serviceDocsControllerListAllServiceDocs(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    serviceDocsControllerListAllServiceDocs(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/service-docs',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
