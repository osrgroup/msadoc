// tslint:disable
/**
 * msdoc server API
 * The msdoc server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    LoginRequestDto,
    LoginResponseDto,
    RefreshTokenRequestDto,
} from '../models';

export interface AuthControllerLoginRequest {
    loginRequestDto: LoginRequestDto;
}

export interface AuthControllerRefreshTokenRequest {
    refreshTokenRequestDto: RefreshTokenRequestDto;
}

/**
 * no description
 */
export class AuthApi extends BaseAPI {

    /**
     */
    authControllerGetMyProfile(): Observable<void>
    authControllerGetMyProfile(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authControllerGetMyProfile(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/auth/me',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    authControllerLogin({ loginRequestDto }: AuthControllerLoginRequest): Observable<LoginResponseDto>
    authControllerLogin({ loginRequestDto }: AuthControllerLoginRequest, opts?: OperationOpts): Observable<AjaxResponse<LoginResponseDto>>
    authControllerLogin({ loginRequestDto }: AuthControllerLoginRequest, opts?: OperationOpts): Observable<LoginResponseDto | AjaxResponse<LoginResponseDto>> {
        throwIfNullOrUndefined(loginRequestDto, 'loginRequestDto', 'authControllerLogin');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<LoginResponseDto>({
            url: '/auth/login',
            method: 'POST',
            headers,
            body: loginRequestDto,
        }, opts?.responseOpts);
    };

    /**
     */
    authControllerRefreshToken({ refreshTokenRequestDto }: AuthControllerRefreshTokenRequest): Observable<LoginResponseDto>
    authControllerRefreshToken({ refreshTokenRequestDto }: AuthControllerRefreshTokenRequest, opts?: OperationOpts): Observable<AjaxResponse<LoginResponseDto>>
    authControllerRefreshToken({ refreshTokenRequestDto }: AuthControllerRefreshTokenRequest, opts?: OperationOpts): Observable<LoginResponseDto | AjaxResponse<LoginResponseDto>> {
        throwIfNullOrUndefined(refreshTokenRequestDto, 'refreshTokenRequestDto', 'authControllerRefreshToken');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<LoginResponseDto>({
            url: '/auth/refresh',
            method: 'POST',
            headers,
            body: refreshTokenRequestDto,
        }, opts?.responseOpts);
    };

}
