// tslint:disable
/**
 * msdoc server API
 * The msdoc server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CreateServiceDocRequest,
    CreateServiceDocResponse,
    DeleteServiceDocResponse,
    GetServiceDocResponse,
    ListServiceDocResponse,
} from '../models';

export interface ServiceDocsControllerCreateServiceDocRequest {
    createServiceDocRequest: CreateServiceDocRequest;
}

export interface ServiceDocsControllerDeleteServiceDocByNameRequest {
    serviceName: string;
}

export interface ServiceDocsControllerGetServiceDocByNameRequest {
    serviceName: string;
}

/**
 * no description
 */
export class ServiceDocsApi extends BaseAPI {

    /**
     */
    serviceDocsControllerCreateServiceDoc({ createServiceDocRequest }: ServiceDocsControllerCreateServiceDocRequest): Observable<CreateServiceDocResponse>
    serviceDocsControllerCreateServiceDoc({ createServiceDocRequest }: ServiceDocsControllerCreateServiceDocRequest, opts?: OperationOpts): Observable<AjaxResponse<CreateServiceDocResponse>>
    serviceDocsControllerCreateServiceDoc({ createServiceDocRequest }: ServiceDocsControllerCreateServiceDocRequest, opts?: OperationOpts): Observable<CreateServiceDocResponse | AjaxResponse<CreateServiceDocResponse>> {
        throwIfNullOrUndefined(createServiceDocRequest, 'createServiceDocRequest', 'serviceDocsControllerCreateServiceDoc');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CreateServiceDocResponse>({
            url: '/service-docs',
            method: 'POST',
            headers,
            body: createServiceDocRequest,
        }, opts?.responseOpts);
    };

    /**
     */
    serviceDocsControllerDeleteAllServiceDocs(): Observable<void>
    serviceDocsControllerDeleteAllServiceDocs(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    serviceDocsControllerDeleteAllServiceDocs(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/service-docs',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    serviceDocsControllerDeleteServiceDocByName({ serviceName }: ServiceDocsControllerDeleteServiceDocByNameRequest): Observable<DeleteServiceDocResponse>
    serviceDocsControllerDeleteServiceDocByName({ serviceName }: ServiceDocsControllerDeleteServiceDocByNameRequest, opts?: OperationOpts): Observable<AjaxResponse<DeleteServiceDocResponse>>
    serviceDocsControllerDeleteServiceDocByName({ serviceName }: ServiceDocsControllerDeleteServiceDocByNameRequest, opts?: OperationOpts): Observable<DeleteServiceDocResponse | AjaxResponse<DeleteServiceDocResponse>> {
        throwIfNullOrUndefined(serviceName, 'serviceName', 'serviceDocsControllerDeleteServiceDocByName');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<DeleteServiceDocResponse>({
            url: '/service-docs/{serviceName}'.replace('{serviceName}', encodeURI(serviceName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    serviceDocsControllerGetServiceDocByName({ serviceName }: ServiceDocsControllerGetServiceDocByNameRequest): Observable<GetServiceDocResponse>
    serviceDocsControllerGetServiceDocByName({ serviceName }: ServiceDocsControllerGetServiceDocByNameRequest, opts?: OperationOpts): Observable<AjaxResponse<GetServiceDocResponse>>
    serviceDocsControllerGetServiceDocByName({ serviceName }: ServiceDocsControllerGetServiceDocByNameRequest, opts?: OperationOpts): Observable<GetServiceDocResponse | AjaxResponse<GetServiceDocResponse>> {
        throwIfNullOrUndefined(serviceName, 'serviceName', 'serviceDocsControllerGetServiceDocByName');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<GetServiceDocResponse>({
            url: '/service-docs/{serviceName}'.replace('{serviceName}', encodeURI(serviceName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    serviceDocsControllerListAllServiceDocs(): Observable<ListServiceDocResponse>
    serviceDocsControllerListAllServiceDocs(opts?: OperationOpts): Observable<AjaxResponse<ListServiceDocResponse>>
    serviceDocsControllerListAllServiceDocs(opts?: OperationOpts): Observable<ListServiceDocResponse | AjaxResponse<ListServiceDocResponse>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ListServiceDocResponse>({
            url: '/service-docs',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
